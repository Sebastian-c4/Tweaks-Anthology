DEFINE_PATCH_MACRO ~2h_descripts~ BEGIN

  SPRINT match_1h @202003
  SPRINT text_2h  @202004
  REPLACE_TEXTUALLY ~%match_1h%~ ~%text_2h%~

END



DEFINE_ACTION_FUNCTION 2h_weapons
  INT_VAR prof_check   = 89
          bg1_type     = 20
          overhead     = 60
          slashing     = 40
          thrusting    = 0
  STR_VAR 2da_file     = cdbastrd
          prefix       = bs
          2h_bam       = isw2h01
          1h_bam       = isw1h01
          2h_paperdoll = S2
BEGIN

  ACTION_IF use_type THEN BEGIN OUTER_SET prof_check = bg1_type END

  // lookup table
  COPY ~cdtweaks/2da/%2da_file%.2da~ ~override~
    COUNT_2DA_ROWS 3 cd_count
  
  // this array used to give item charges
  ACTION_CLEAR_ARRAY cd_bastard
  
  // search for items and push them into lookup table if not already listed
  COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
    PATCH_IF (use_type = 1) BEGIN
      READ_SHORT 0x1c prof
    END ELSE BEGIN
      READ_BYTE 0x31 prof
    END
    READ_BYTE 0x18 flags
    SET melee = 0
    READ_LONG  0x64 abil_off
    READ_SHORT 0x68 abil_num
    FOR (index = 0 ; index < abil_num ; ++index) BEGIN
      READ_SHORT (abil_off +        (index * 0x38)) type
      PATCH_IF (type = 1) BEGIN
        SET melee = 1
      END
      PATCH_IF (type = 2) BEGIN
        SET melee = 0
        SET index = abil_num // kills loop, prevents patching if ranged item
      END
    END
    PATCH_IF ((melee = 1) AND (prof = prof_check) AND ((flags & 0b00000110) = BIT2) AND  // correct prof, droppable, 1-handed, only if it has melee ability w/o ranged
              (!FILE_CONTAINS_EVALUATED (~%2da_file%.2da~ ~^%SOURCE_RES% ~))) BEGIN      // and not already in file
      INNER_ACTION BEGIN
  
        OUTER_SET cd_count += 1
        APPEND ~%2da_file%.2da~ ~%SOURCE_RES%  cd%prefix%%cd_count%  c!%prefix%%cd_count%~

      END
    END
    BUT_ONLY
  
  // copy lookup table back w/o backup--this means further (re-)installs will
  // keep the existing file names and prevent save breakage
  COPY + ~override/%2da_file%.2da~ ~cdtweaks/2da/%2da_file%.2da~
    COUNT_2DA_ROWS 3 rows
    FOR (index = 0 ; index < rows ; ++index) BEGIN
      READ_2DA_ENTRY index 0 3 orig
      READ_2DA_ENTRY index 1 3 1h
      READ_2DA_ENTRY index 2 3 2h
      INNER_ACTION BEGIN
  
        ACTION_IF FILE_EXISTS_IN_GAME ~%orig%.itm~ THEN BEGIN
  
          COPY_EXISTING ~%orig%.itm~ ~override~ // &$^*# CoM item names
            PATCH_IF (use_type = 1) BEGIN
              READ_SHORT 0x1c prof // use type
            END ELSE BEGIN
              READ_BYTE 0x31 prof
            END
            PATCH_IF (prof = prof_check) BEGIN // bg2/ee bastard prof
              SET proceed = 1
            END ELSE BEGIN
              SET proceed = 0
            END
          
          ACTION_IF proceed = 1 THEN BEGIN
  
            COPY_EXISTING ~%orig%.itm~ ~override~
              READ_SHORT  0x42 lore
              PATCH_IF (lore = 0) BEGIN
                SPRINT 1h ~%orig%~ // if original has no lore, don't bother with a second 1h item
              END
              READ_SHORT  0x68 abil_num
              WRITE_SHORT 0x68 (abil_num + 1)
              READ_LONG   0x6a fx_off
              WRITE_LONG  0x6a (fx_off + 0x38)
              PATCH_IF (abil_num > 0) BEGIN
                READ_LONG   0x64 abil_off
                READ_SHORT (abil_off + 0x1e + ((abil_num - 1) * 0x38)) last_fx_num
                READ_SHORT (abil_off + 0x20 + ((abil_num - 1) * 0x38)) last_fx_idx
                SET new_fx = (last_fx_idx + last_fx_num)
              END ELSE BEGIN
                READ_SHORT  0x70 new_fx
              END
              // because create inventory item doesn't have a way to set charges, create new and delete current
              INSERT_BYTES   (fx_off +        (new_fx * 0x30)) 0x30 // new effect
                WRITE_SHORT  (fx_off +        (new_fx * 0x30)) 122  // create inventory item
                WRITE_BYTE   (fx_off + 0x02 + (new_fx * 0x30)) 1    // target: self
                WRITE_BYTE   (fx_off + 0x0c + (new_fx * 0x30)) 1    // instant/permanent till death
                WRITE_BYTE   (fx_off + 0x12 + (new_fx * 0x30)) 100  // probability
                WRITE_ASCIIE (fx_off + 0x14 + (new_fx * 0x30)) ~%2h%~ #8
              INSERT_BYTES   (fx_off       ) 0x38         // new ability
                WRITE_BYTE   (fx_off       ) 3            // magical
                WRITE_BYTE   (fx_off + 0x01) 1            // ID to use
                WRITE_SHORT  (fx_off + 0x02) 3            // in item slots
                WRITE_ASCIIE (fx_off + 0x04) ~%2h_bam%~ #8 // item bam
                WRITE_SHORT  (fx_off + 0x0c) 5            // target: caster
                WRITE_SHORT  (fx_off + 0x0e) 1            // range: 1
                WRITE_SHORT  (fx_off + 0x1e) 1            // num effects: 1
                WRITE_SHORT  (fx_off + 0x20) new_fx       // fx index
                WRITE_SHORT  (fx_off + 0x22) 1            // num charges
                WRITE_BYTE   (fx_off + 0x24) 1            // vanishes when drained
                WRITE_LONG   (fx_off + 0x26) BIT11        // recharge after resting
                WRITE_SHORT  (fx_off + 0x2a) 1            // projectile: none
              BUT_ONLY
  
            ACTION_IF (abil_num > 3) BEGIN // don't worry about charges, just fix tooltips for loaded items
  
              ACTION_IF (FILE_CONTAINS_EVALUATED (~tooltip.2da~ ~^%SOURCE_RES% ~)) BEGIN
  
                COPY_EXISTING ~tooltip.2da~ ~override~
                  REPLACE_TEXTUALLY ~^\(%orig%\)\([ %TAB%]+.+\)~ ~\1\2
%1h%\2
%2h%\2~

              END

            END ELSE BEGIN // build charge array, add/fix tooltips

              ACTION_DEFINE_ASSOCIATIVE_ARRAY cd_bastard BEGIN "%orig%" => "%abil_num%" END

              ACTION_IF (FILE_CONTAINS_EVALUATED (~tooltip.2da~ ~^%orig% ~)) BEGIN // fix existing tooltips

                COPY_EXISTING ~tooltip.2da~ ~override~
                  PATCH_IF (abil_num = 0) BEGIN
                    REPLACE_TEXTUALLY ~^\(%orig%\)\([ %TAB%]+\)\(-?[0-9]+\)\(.+\)~ ~\1\2CDTWOHANDED\3
%1h%\2CDTWOHANDED\3
%2h%\2CDONEHANDED\3~
                  END ELSE
                  PATCH_IF (abil_num = 1) BEGIN
                    REPLACE_TEXTUALLY ~^\(%orig%\)\([ %TAB%]+-?[0-9]+[ %TAB%]+\)\(-?[0-9]+\)\(.+\)~ ~\1\2CDTWOHANDED\3
%1h%\2CDTWOHANDED\3
%2h%\2CDONEHANDED\3~
                  END ELSE
                  PATCH_IF (abil_num = 2) BEGIN
                    REPLACE_TEXTUALLY ~^\(%orig%\)\([ %TAB%]+-?[0-9]+[ %TAB%]+-?[0-9]+[ %TAB%]+\)\(-?[0-9]+\)~ ~\1\2CDTWOHANDED
%1h%\2CDTWOHANDED
%2h%\2CDONEHANDED~
                  END

              END ELSE BEGIN // or add as new tooltips

                ACTION_IF (abil_num = 0) BEGIN
                  APPEND ~tooltip.2da~ ~%orig% CDTWOHANDED -1 -1
%2h% CDONEHANDED -1 -1~
                  APPEND ~tooltip.2da~ ~%1h% CDTWOHANDED -1 -1~ UNLESS ~^%1h% ~ // separate to avoid duplicate entries for 0 lore
                END

                ACTION_IF (abil_num = 1) BEGIN
                  APPEND ~tooltip.2da~ ~%orig% -1 CDTWOHANDED -1
%2h% -1 CDONEHANDED -1~
                  APPEND ~tooltip.2da~ ~%1h% -1 CDTWOHANDED -1~ UNLESS ~^%1h% ~
                END

                ACTION_IF (abil_num = 2) BEGIN
                  APPEND ~tooltip.2da~ ~%orig% -1 -1 CDTWOHANDED
%2h% -1 -1 CDONEHANDED~
                  APPEND ~tooltip.2da~ ~%1h% -1 -1 CDTWOHANDED~ UNLESS ~^%1h% ~
                END
  
              END
  
            END
  
            COPY_EXISTING ~%orig%.itm~ ~override/%2h%.itm~
                          ~%orig%.itm~ ~override/%1h%.itm~
              WRITE_SHORT 0x42 0 // no lore
  
            COPY_EXISTING ~%2h%.itm~ ~override~
              WRITE_ASCIIE (fx_off + 0x4c + (new_fx * 0x30)) ~%1h%~ #8 // exploit the fact that fx_off and new_fx carry over
              WRITE_ASCIIE (fx_off + 0x04) ~%1h_bam%~ #8               // item bam
              WRITE_BYTE  0x18 THIS | BIT1                             // add two-handed flag
              WRITE_ASCIIE 0x22 ~%2h_paperdoll%~ #2                    // paperdoll animation
              FOR (loops = 0; loops < abil_num; ++loops) BEGIN
                READ_BYTE (abil_off + (loops * 0x38)) type
                PATCH_IF (type = 1) BEGIN // adjust melee abilities to 2h sword mix of attacks
                  WRITE_SHORT (abil_off + 0x2c + (loops * 0x38)) overhead  // overhand attacks
                  WRITE_SHORT (abil_off + 0x2e + (loops * 0x38)) slashing  // slashing attacks
                  WRITE_SHORT (abil_off + 0x30 + (loops * 0x38)) thrusting // thrusting attacks
                END
              END
              // update descriptions
              PATCH_FOR_EACH offset IN 0x50 0x54 BEGIN
                READ_LONG ~%offset%~ desc_strref
                PATCH_IF (desc_strref >= 0 && desc_strref < 2147483646) BEGIN
                  READ_STRREF ~%offset%~ desc
                  INNER_PATCH_SAVE desc ~%desc%~ BEGIN
                    LAUNCH_PATCH_MACRO ~2h_descripts~
                  END
                  SAY_EVALUATED ~%offset%~ ~%desc%~ // write changes
                END
              END

            ACTION_IF (game_is_eet) AND (FILE_CONTAINS_EVALUATED (~K#SHATWE.BCS~ ~"%1h%"~)) BEGIN
              EXTEND_BOTTOM ~K#SHATWE.BCS~ ~cdtweaks/baf/eet_shattering.baf~ EVALUATE_BUFFER
            END

          END // prof sanity check
  
        END // action_if file_exists
  
      END
    END

  COPY_EXISTING ~tooltip.2da~ ~override~
    REPLACE ~CDONEHANDED~ @202001
    REPLACE ~CDTWOHANDED~ @202002
    PRETTY_PRINT_2DA
  
  PRINT @1
  COPY_EXISTING_REGEXP GLOB ~^.+\.[ac]re$~ ~override~
    PATCH_IF ("%SOURCE_FILE%" STRING_COMPARE_REGEXP "^.+\.cre$" = 0) BEGIN // if creature
      READ_LONG 0x2bc itm_off ELSE 0
      READ_LONG 0x2c0 itm_num ELSE 0
    END ELSE BEGIN
      READ_LONG  0x78 itm_off ELSE 0
      READ_SHORT 0x76 itm_num ELSE 0
    END
    FOR (index = 0 ; index < itm_num ; ++index) BEGIN
      READ_ASCII (itm_off +        (0x14 * index)) item ELSE ""
      PHP_EACH cd_bastard AS itemname => charge BEGIN
        PATCH_IF ("%item%" STRING_COMPARE_CASE "%itemname%" = 0) BEGIN
          WRITE_SHORT (itm_off + 0x0a + (charge * 0x02) + (0x14 * index)) 1 // add charge
        END
      END
    END
    BUT_ONLY
  
  // add charges to items being sold
  COPY_EXISTING_REGEXP GLOB ~^.+\.sto$~ ~override~
    READ_LONG 0x34 sale_off  ELSE 0
    READ_LONG 0x38 sale_num  ELSE 0
    FOR (index = 0 ; index < sale_num ; ++index) BEGIN
      READ_ASCII (sale_off +        (index * 0x1c)) item
      PHP_EACH cd_bastard AS itemname => charge BEGIN
        PATCH_IF ("%item%" STRING_COMPARE_CASE "%itemname%" = 0) BEGIN
          WRITE_SHORT (sale_off + 0x0a + (charge * 0x02) + (0x1c * index)) 1 // add charge
        END
      END
    END
    BUT_ONLY

END